.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "App::TimeTracker::Task 3pm"
.TH App::TimeTracker::Task 3pm "2009-11-03" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
App::TimeTracker::Task \- interface to one task
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&    my $task = App::TimeTracker::Task\->new({
\&        start   => \*(Aq1232010055\*(Aq,
\&        project => \*(AqTimeTracker\*(Aq,
\&        tags    => \e@tags,
\&        basedir =>\*(Aq/path/to/basedir\*(Aq,
\&    });
\&    $task\->stop_it;
\&    $task\->write(  );  
\&
\&
\&    my $task = App::TimeTracker::Task\->read(\*(Aq/path/to/file\*(Aq);
\&    say $task\->start;       # epoche
\&    say $task\->is_active;   # 1 or 0
\&    say $task\->duration;    # in seconds
.Ve
.SH "METHODS"
.IX Header "METHODS"
\fInew\fR
.IX Subsection "new"
.PP
.Vb 1
\&    my $task = App::TimeTracker::App\->new( $data );
.Ve
.PP
Initiate a new task object.
.PP
\fIstop_it\fR
.IX Subsection "stop_it"
.PP
.Vb 2
\&    $self\->stop_it;
\&    $self\->stop_it( $dt );
.Ve
.PP
Stop this task, either at the specified \f(CW$epoche\fR, or \f(CW\*(C`now()\*(C'\fR. Throws an exception if the task is already stopped.
.PP
Returns \f(CW$self\fR for method chaining.
.PP
\fIread\fR
.IX Subsection "read"
.PP
.Vb 1
\&    my $task = App::TimeTracker::Task\->read( $path );
.Ve
.PP
Reads the specified file, parses it, generates a new object and returns the object.
.PP
\fIwrite\fR
.IX Subsection "write"
.PP
.Vb 2
\&   $task\->write;
\&   $task\->write( $basedir );
.Ve
.PP
Serialises the data and writes it to disk.
.PP
If you got the object via read, you don't need to specifiy the 
\&\f(CW$basedir\fR. If this is the first time you want to \f(CW\*(C`write\*(C'\fR the 
object, the \f(CW$basedir\fR is neccesary.
.PP
\fIset_current\fR
.IX Subsection "set_current"
.PP
.Vb 1
\&    $task\->set_current;
.Ve
.PP
Makes \f(CW$task\fR the current task
.PP
\fIget_current\fR
.IX Subsection "get_current"
.PP
.Vb 1
\&    my $current = App::TimeTracker::Task\->get_current( $basedir );
.Ve
.PP
Loads the current task (i.e. the one you're working on \s-1ATM\s0). Returns 
undef if there is no current task.
.PP
\fIremove_current\fR
.IX Subsection "remove_current"
.PP
.Vb 1
\&    $self\->remove_current;
.Ve
.PP
Removes the current task file (because it's no longer current, but done).
.PP
\fIremove_suspended\fR
.IX Subsection "remove_suspended"
.PP
remove the suspendend file. \s-1NOT\s0 \s-1IMPLEMENTED\s0 \s-1YET\s0
.PP
\fIstop_current\fR
.IX Subsection "stop_current"
.PP
Stops the current task
.PP
\fIget_printable_interval\fR
.IX Subsection "get_printable_interval"
.PP
.Vb 1
\&    my $string = $self\->get_printable_interval([$start, stop]);
.Ve
.PP
Returns a string like \*(L"worked 30 minutes, 23 seconds on Task (foo bar)\*(R"
.PP
\fIbeautify_duration\fR
.IX Subsection "beautify_duration"
.PP
.Vb 1
\&    my $nice_message = $self\->beautify_duration($duration);
.Ve
.PP
Turns an DateTime::Duration object into a nicer representation (\*(L"4 minutes, 31 seconds\*(R")
.PP
\fIbeautify_seconds\fR
.IX Subsection "beautify_seconds"
.PP
.Vb 1
\&    my $nice_message = $self\->beautify_seconds($seconds);
.Ve
.PP
Turns an amount of seconds into a nicer representation (\*(L"4 minutes, 31 seconds\*(R")
.PP
\fInice_tags\fR
.IX Subsection "nice_tags"
.PP
.Vb 1
\&    say $task\->nice_tags;
.Ve
.PP
Pretty-print the tag list
.PP
\fIis_active\fR
.IX Subsection "is_active"
.PP
Returns true if the task is active, undef if it isn't
.SH "AUTHOR"
.IX Header "AUTHOR"
Thomas Klausner, \f(CW\*(C`<domm at cpan.org>\*(C'\fR
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2008, 2009 Thomas Klausner, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
